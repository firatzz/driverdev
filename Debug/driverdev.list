
driverdev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  4 .ARM          00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010758  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000257c  00000000  00000000  00010782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c4  00000000  00000000  00012cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000132c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00013398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002129  00000000  00000000  00013430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013af  00000000  00000000  00015559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008f2f  00000000  00000000  00016908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001f837  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001f88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000738 	.word	0x08000738

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000738 	.word	0x08000738

080001e8 <EXTI0_IRQHandler>:
#endif

static void GPIO_LedConfig();

void EXTI0_IRQHandler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	if ( EXTI->PR & 0x1 )
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <EXTI0_IRQHandler+0x2c>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00a      	beq.n	800020e <EXTI0_IRQHandler+0x26>
	{
		EXTI->PR |= ( 0x1U << 0U);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <EXTI0_IRQHandler+0x2c>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <EXTI0_IRQHandler+0x2c>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6153      	str	r3, [r2, #20]

		GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <EXTI0_IRQHandler+0x30>)
 800020a:	f000 fa4f 	bl	80006ac <GPIO_TogglePin>

	}
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40013c00 	.word	0x40013c00
 8000218:	40021800 	.word	0x40021800

0800021c <main>:

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

	/**/
	GPIO_LedConfig();
 8000220:	f000 f80c 	bl	800023c <GPIO_LedConfig>

	//GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_Pin_Set);
	GPIO_WritePin(GPIOG, GPIO_PIN_All, GPIO_Pin_Reset);
 8000224:	2200      	movs	r2, #0
 8000226:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <main+0x1c>)
 800022c:	f000 fa25 	bl	800067a <GPIO_WritePin>

	GPIO_ButtonInterruptConfg();
 8000230:	f000 f854 	bl	80002dc <GPIO_ButtonInterruptConfg>
    /* Loop forever */
	for(;;)
 8000234:	e7fe      	b.n	8000234 <main+0x18>
 8000236:	bf00      	nop
 8000238:	40021800 	.word	0x40021800

0800023c <GPIO_LedConfig>:
	}

}

static void GPIO_LedConfig()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 8000242:	463b      	mov	r3, r7
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
 8000250:	615a      	str	r2, [r3, #20]


	RCC_GPIOA_CLK_ENABLE();
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <GPIO_LedConfig+0x94>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <GPIO_LedConfig+0x94>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6313      	str	r3, [r2, #48]	; 0x30
 8000262:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <GPIO_LedConfig+0x94>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	61fb      	str	r3, [r7, #28]
	RCC_GPIOG_CLK_ENABLE();
 800026c:	2300      	movs	r3, #0
 800026e:	61bb      	str	r3, [r7, #24]
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <GPIO_LedConfig+0x94>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <GPIO_LedConfig+0x94>)
 8000276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <GPIO_LedConfig+0x94>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000284:	61bb      	str	r3, [r7, #24]


	GPIO_InitStruct.pinNumber =  GPIO_PIN_13 | GPIO_PIN_14;
 8000286:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800028a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800028c:	2301      	movs	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_OSPEED_LOW;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]

	GPIO_Init(GPIOG, &GPIO_InitStruct);
 800029c:	463b      	mov	r3, r7
 800029e:	4619      	mov	r1, r3
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <GPIO_LedConfig+0x98>)
 80002a2:	f000 f95e 	bl	8000562 <GPIO_Init>

	memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 80002a6:	463b      	mov	r3, r7
 80002a8:	2218      	movs	r2, #24
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa3b 	bl	8000728 <memset>

	GPIO_InitStruct.pinNumber = GPIO_PIN_0;
 80002b2:	2301      	movs	r3, #1
 80002b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.PuPd = GPIO_PUPD_PULLDOWN; //when button not pressed, port should read 0. otherwise it would read float num. see schematics.
 80002ba:	2302      	movs	r3, #2
 80002bc:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	463b      	mov	r3, r7
 80002c0:	4619      	mov	r1, r3
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <GPIO_LedConfig+0x9c>)
 80002c4:	f000 f94d 	bl	8000562 <GPIO_Init>

	//EXTI_LineConfig(EXTI_PortSource_GPIOC,EXTI_Source_14);

}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40021800 	.word	0x40021800
 80002d8:	40020000 	.word	0x40020000

080002dc <GPIO_ButtonInterruptConfg>:

static void GPIO_ButtonInterruptConfg()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef_t EXTI_InitStruct = { 0 };
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]

	RCC_SYSCFG_CLK_ENABLE();
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <GPIO_ButtonInterruptConfg+0x54>)
 80002ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ee:	4a10      	ldr	r2, [pc, #64]	; (8000330 <GPIO_ButtonInterruptConfg+0x54>)
 80002f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f4:	6453      	str	r3, [r2, #68]	; 0x44
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <GPIO_ButtonInterruptConfg+0x54>)
 80002f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002fe:	607b      	str	r3, [r7, #4]

	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_Source_0);
 8000300:	2100      	movs	r1, #0
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f8c8 	bl	8000498 <EXTI_LineConfig>

	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_Source_0;
 800030c:	2300      	movs	r3, #0
 800030e:	703b      	strb	r3, [r7, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 8000310:	2300      	movs	r3, #0
 8000312:	70bb      	strb	r3, [r7, #2]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Rising;
 8000314:	2308      	movs	r3, #8
 8000316:	707b      	strb	r3, [r7, #1]


	EXTI_Init(&EXTI_InitStruct);
 8000318:	463b      	mov	r3, r7
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f834 	bl	8000388 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 8000320:	2006      	movs	r0, #6
 8000322:	f000 f8eb 	bl	80004fc <NVIC_EnableInterrupt>

}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f9bd 	bl	80006e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff59 	bl	800021c <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000378:	08000758 	.word	0x08000758
  ldr r2, =_sbss
 800037c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000380:	2000001c 	.word	0x2000001c

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <EXTI_Init>:
  *
  * @retval Void
  */

void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]

	tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <EXTI_Init+0x10c>)
 8000396:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000398:	4b3e      	ldr	r3, [pc, #248]	; (8000494 <EXTI_Init+0x10c>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4619      	mov	r1, r3
 80003a2:	2301      	movs	r3, #1
 80003a4:	408b      	lsls	r3, r1
 80003a6:	43db      	mvns	r3, r3
 80003a8:	493a      	ldr	r1, [pc, #232]	; (8000494 <EXTI_Init+0x10c>)
 80003aa:	4013      	ands	r3, r2
 80003ac:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003ae:	4b39      	ldr	r3, [pc, #228]	; (8000494 <EXTI_Init+0x10c>)
 80003b0:	685a      	ldr	r2, [r3, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4619      	mov	r1, r3
 80003b8:	2301      	movs	r3, #1
 80003ba:	408b      	lsls	r3, r1
 80003bc:	43db      	mvns	r3, r3
 80003be:	4935      	ldr	r1, [pc, #212]	; (8000494 <EXTI_Init+0x10c>)
 80003c0:	4013      	ands	r3, r2
 80003c2:	604b      	str	r3, [r1, #4]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	78db      	ldrb	r3, [r3, #3]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d04b      	beq.n	8000464 <EXTI_Init+0xdc>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	461a      	mov	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4413      	add	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *)tempValue = (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2201      	movs	r2, #1
 80003e2:	408a      	lsls	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 80003e6:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <EXTI_Init+0x10c>)
 80003e8:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <EXTI_Init+0x10c>)
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	2301      	movs	r3, #1
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	4926      	ldr	r1, [pc, #152]	; (8000494 <EXTI_Init+0x10c>)
 80003fc:	4013      	ands	r3, r2
 80003fe:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000400:	4b24      	ldr	r3, [pc, #144]	; (8000494 <EXTI_Init+0x10c>)
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4619      	mov	r1, r3
 800040a:	2301      	movs	r3, #1
 800040c:	408b      	lsls	r3, r1
 800040e:	43db      	mvns	r3, r3
 8000410:	4920      	ldr	r1, [pc, #128]	; (8000494 <EXTI_Init+0x10c>)
 8000412:	4013      	ands	r3, r2
 8000414:	60cb      	str	r3, [r1, #12]
		if (EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	785b      	ldrb	r3, [r3, #1]
 800041a:	2b10      	cmp	r3, #16
 800041c:	d114      	bne.n	8000448 <EXTI_Init+0xc0>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <EXTI_Init+0x10c>)
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	2301      	movs	r3, #1
 800042a:	408b      	lsls	r3, r1
 800042c:	4919      	ldr	r1, [pc, #100]	; (8000494 <EXTI_Init+0x10c>)
 800042e:	4313      	orrs	r3, r2
 8000430:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <EXTI_Init+0x10c>)
 8000434:	68da      	ldr	r2, [r3, #12]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4619      	mov	r1, r3
 800043c:	2301      	movs	r3, #1
 800043e:	408b      	lsls	r3, r1
 8000440:	4914      	ldr	r1, [pc, #80]	; (8000494 <EXTI_Init+0x10c>)
 8000442:	4313      	orrs	r3, r2
 8000444:	60cb      	str	r3, [r1, #12]
		tempValue = (uint32_t)EXTI_BASE_ADDR;
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*(__IO uint32_t *)tempValue &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);

	}
}
 8000446:	e020      	b.n	800048a <EXTI_Init+0x102>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	785b      	ldrb	r3, [r3, #1]
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	4413      	add	r3, r2
 8000452:	60fb      	str	r3, [r7, #12]
			*(__IO uint32_t *)tempValue = (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	e012      	b.n	800048a <EXTI_Init+0x102>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <EXTI_Init+0x10c>)
 8000466:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	789b      	ldrb	r3, [r3, #2]
 800046c:	461a      	mov	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
		*(__IO uint32_t *)tempValue &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461a      	mov	r2, r3
 800047e:	2301      	movs	r3, #1
 8000480:	4093      	lsls	r3, r2
 8000482:	43da      	mvns	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	400a      	ands	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40013c00 	.word	0x40013c00

08000498 <EXTI_LineConfig>:
  *
  * @retval Void
  */

void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	460a      	mov	r2, r1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	4613      	mov	r3, r2
 80004a6:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;

	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2];			/*Divide by 4 to find which EXTICR*/
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <EXTI_LineConfig+0x60>)
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	3302      	adds	r3, #2
 80004b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b6:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);		/*Clear bits*/
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	220f      	movs	r2, #15
 80004c2:	fa02 f303 	lsl.w	r3, r2, r3
 80004c6:	43db      	mvns	r3, r3
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U ) * 4);  /*Mode by 8 and find exact pin and write port source*/
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	f003 0303 	and.w	r3, r3, #3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTI_CR[EXTI_LineSource >> 2] = tempValue;
 80004de:	4906      	ldr	r1, [pc, #24]	; (80004f8 <EXTI_LineConfig+0x60>)
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	089b      	lsrs	r3, r3, #2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3302      	adds	r3, #2
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40013800 	.word	0x40013800

080004fc <NVIC_EnableInterrupt>:
  *
  * @retval Void
  */

void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]

	tempValue = *( (IRQNumber >> 5U) + NVIC_ISER0 );		//Get NVIC register
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	095b      	lsrs	r3, r3, #5
 800050e:	b2db      	uxtb	r3, r3
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000516:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU)); 				//Mode(5) of IRQ and clear
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f003 031f 	and.w	r3, r3, #31
 8000524:	2201      	movs	r2, #1
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	43db      	mvns	r3, r3
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4013      	ands	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQNumber & 0x1FU));				//set to enable
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f003 031f 	and.w	r3, r3, #31
 8000538:	2201      	movs	r2, #1
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	4313      	orrs	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
	*( (IRQNumber >> 5U) + NVIC_ISER0 ) = tempValue;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	b2db      	uxtb	r3, r3
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000550:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <GPIO_Init>:
  *
  * @retval Void
  */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 8000562:	b480      	push	{r7}
 8000564:	b087      	sub	sp, #28
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]

	uint32_t position;
	uint32_t fakePosition = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]

	for ( position = 0; position < 16; position++ )
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	e076      	b.n	8000668 <GPIO_Init+0x106>
	{
		fakePosition = ( 0x1U << position );
 800057a:	2201      	movs	r2, #1
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)GPIO_ConfigStruct->pinNumber & fakePosition;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]

		if(fakePosition == lastPosition)
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	429a      	cmp	r2, r3
 8000594:	d165      	bne.n	8000662 <GPIO_Init+0x100>
		{
				/*	MODE CONFIG	*/
				uint32_t temp = GPIOx->MODER;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	60bb      	str	r3, [r7, #8]
				temp &= ~( 0x3U << (position *2) );
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	2203      	movs	r2, #3
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60bb      	str	r3, [r7, #8]
				temp |= (GPIO_ConfigStruct->Mode << (position *2));
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	4313      	orrs	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
				GPIOx->MODER = temp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	601a      	str	r2, [r3, #0]

				if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF )
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d003      	beq.n	80005d6 <GPIO_Init+0x74>
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d12d      	bne.n	8000632 <GPIO_Init+0xd0>
				{
					/*	OUTPUT TYPE CONFIG	*/
					temp = GPIOx->OTYPER;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60bb      	str	r3, [r7, #8]
					temp &= ~( 0x1U << position );
 80005dc:	2201      	movs	r2, #1
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
					temp |= (GPIO_ConfigStruct->Otype << position);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
					GPIOx->OTYPER = temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	605a      	str	r2, [r3, #4]

					/*	OSPEED CONFIG	*/
					temp = GPIOx->OSPEEDR;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	60bb      	str	r3, [r7, #8]
					temp &= ~( 0x3U << (position *2) );
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	2203      	movs	r2, #3
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4013      	ands	r3, r2
 8000618:	60bb      	str	r3, [r7, #8]
					temp |= (GPIO_ConfigStruct->Speed << (position *2));
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	691a      	ldr	r2, [r3, #16]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	4313      	orrs	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
					GPIOx->OSPEEDR = temp;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	609a      	str	r2, [r3, #8]

				}
				/*	PUSH PULL CONFIG	*/
				temp = GPIOx->PUPDR;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	60bb      	str	r3, [r7, #8]
				temp &= ~( 0x3U << (position *2) );
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2203      	movs	r2, #3
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	4013      	ands	r3, r2
 8000648:	60bb      	str	r3, [r7, #8]
				temp |= (GPIO_ConfigStruct->PuPd << (position *2));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	4313      	orrs	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
				GPIOx->PUPDR = temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	60da      	str	r2, [r3, #12]
	for ( position = 0; position < 16; position++ )
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b0f      	cmp	r3, #15
 800066c:	d985      	bls.n	800057a <GPIO_Init+0x18>





}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	371c      	adds	r7, #28
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <GPIO_WritePin>:
  * @retval Void
  */


void GPIO_WritePin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber, GPIO_PinState_t pinState)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	707b      	strb	r3, [r7, #1]
//	GPIOx->BSRR = (pinNumber | (pinNumber << 16U)) & pinState;
	if( pinState == GPIO_Pin_Set )
 800068a:	787b      	ldrb	r3, [r7, #1]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d103      	bne.n	8000698 <GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = pinNumber;
 8000690:	887a      	ldrh	r2, [r7, #2]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	619a      	str	r2, [r3, #24]
	else
	{
		GPIOx->BSRR = (pinNumber << 16U );
	}

}
 8000696:	e004      	b.n	80006a2 <GPIO_WritePin+0x28>
		GPIOx->BSRR = (pinNumber << 16U );
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	619a      	str	r2, [r3, #24]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <GPIO_TogglePin>:
  *
  * @retval Void
  */

void GPIO_TogglePin( GPIO_TypeDef_t *GPIOx, uint16_t pinNumber )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
	uint32_t tempODRRegister = GPIOx->ODR;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR = (tempODRRegister & pinNumber) << 16U | (~tempODRRegister & pinNumber);
 80006be:	887a      	ldrh	r2, [r7, #2]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4013      	ands	r3, r2
 80006c4:	041a      	lsls	r2, r3, #16
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	43d9      	mvns	r1, r3
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	400b      	ands	r3, r1
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <__libc_init_array>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4d0d      	ldr	r5, [pc, #52]	; (8000718 <__libc_init_array+0x38>)
 80006e4:	4c0d      	ldr	r4, [pc, #52]	; (800071c <__libc_init_array+0x3c>)
 80006e6:	1b64      	subs	r4, r4, r5
 80006e8:	10a4      	asrs	r4, r4, #2
 80006ea:	2600      	movs	r6, #0
 80006ec:	42a6      	cmp	r6, r4
 80006ee:	d109      	bne.n	8000704 <__libc_init_array+0x24>
 80006f0:	4d0b      	ldr	r5, [pc, #44]	; (8000720 <__libc_init_array+0x40>)
 80006f2:	4c0c      	ldr	r4, [pc, #48]	; (8000724 <__libc_init_array+0x44>)
 80006f4:	f000 f820 	bl	8000738 <_init>
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	10a4      	asrs	r4, r4, #2
 80006fc:	2600      	movs	r6, #0
 80006fe:	42a6      	cmp	r6, r4
 8000700:	d105      	bne.n	800070e <__libc_init_array+0x2e>
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f855 3b04 	ldr.w	r3, [r5], #4
 8000708:	4798      	blx	r3
 800070a:	3601      	adds	r6, #1
 800070c:	e7ee      	b.n	80006ec <__libc_init_array+0xc>
 800070e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000712:	4798      	blx	r3
 8000714:	3601      	adds	r6, #1
 8000716:	e7f2      	b.n	80006fe <__libc_init_array+0x1e>
 8000718:	08000750 	.word	0x08000750
 800071c:	08000750 	.word	0x08000750
 8000720:	08000750 	.word	0x08000750
 8000724:	08000754 	.word	0x08000754

08000728 <memset>:
 8000728:	4402      	add	r2, r0
 800072a:	4603      	mov	r3, r0
 800072c:	4293      	cmp	r3, r2
 800072e:	d100      	bne.n	8000732 <memset+0xa>
 8000730:	4770      	bx	lr
 8000732:	f803 1b01 	strb.w	r1, [r3], #1
 8000736:	e7f9      	b.n	800072c <memset+0x4>

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
