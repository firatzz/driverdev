
driverdev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800096c  0800096c  0001096c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800097c  0800097c  00010984  2**0
                  CONTENTS
  4 .ARM          00000000  0800097c  0800097c  00010984  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800097c  08000984  00010984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800097c  0800097c  0001097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000980  08000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010984  2**0
                  CONTENTS
 10 .bss          00000040  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010984  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003315  00000000  00000000  000109ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007fc  00000000  00000000  00013cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000144c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d0  00000000  00000000  000145d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002579  00000000  00000000  000146a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a1f  00000000  00000000  00016c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c60  00000000  00000000  00018640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000222a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000033c  00000000  00000000  000222f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000954 	.word	0x08000954

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000954 	.word	0x08000954

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <EXTI0_IRQHandler>:
#endif

static void GPIO_LedConfig();
SPI_HandleTypeDef_t SPI_Handle;
void EXTI0_IRQHandler()
{
 80001f8:	b590      	push	{r4, r7, lr}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
	char msgToSend[] = "Hello World\n";
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <EXTI0_IRQHandler+0x48>)
 8000200:	463c      	mov	r4, r7
 8000202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000204:	c407      	stmia	r4!, {r0, r1, r2}
 8000206:	7023      	strb	r3, [r4, #0]
	if ( EXTI->PR & 0x1 )
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d010      	beq.n	8000236 <EXTI0_IRQHandler+0x3e>
	{
		EXTI->PR |= ( 0x1U << 0U);
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <EXTI0_IRQHandler+0x4c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6153      	str	r3, [r2, #20]

		SPI_TransmitData(&SPI_Handle, (uint8_t*)msgToSend, strlen(msgToSend));
 8000220:	463b      	mov	r3, r7
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffe0 	bl	80001e8 <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	463b      	mov	r3, r7
 800022e:	4619      	mov	r1, r3
 8000230:	4805      	ldr	r0, [pc, #20]	; (8000248 <EXTI0_IRQHandler+0x50>)
 8000232:	f000 fb08 	bl	8000846 <SPI_TransmitData>

	}
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	bd90      	pop	{r4, r7, pc}
 800023e:	bf00      	nop
 8000240:	0800096c 	.word	0x0800096c
 8000244:	40013c00 	.word	0x40013c00
 8000248:	2000001c 	.word	0x2000001c

0800024c <main>:

int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	/**/
	GPIO_LedConfig();
 8000250:	f000 f808 	bl	8000264 <GPIO_LedConfig>

	GPIO_ButtonInterruptConfg();
 8000254:	f000 f84a 	bl	80002ec <GPIO_ButtonInterruptConfg>

	//GPIO_WritePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_Pin_Set);
	SPI_GPIO_Config();
 8000258:	f000 f8ba 	bl	80003d0 <SPI_GPIO_Config>

	SPI_Config();
 800025c:	f000 f87e 	bl	800035c <SPI_Config>

    /* Loop forever */
	for(;;)
 8000260:	e7fe      	b.n	8000260 <main+0x14>
	...

08000264 <GPIO_LedConfig>:
	}

}

static void GPIO_LedConfig()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
 8000278:	615a      	str	r2, [r3, #20]

	RCC_GPIOG_CLK_ENABLE();
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <GPIO_LedConfig+0x7c>)
 8000280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000282:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <GPIO_LedConfig+0x7c>)
 8000284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000288:	6313      	str	r3, [r2, #48]	; 0x30
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <GPIO_LedConfig+0x7c>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000292:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.pinNumber =  GPIO_PIN_13 | GPIO_PIN_14;
 8000294:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000298:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800029a:	2301      	movs	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_OSPEED_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOG, &GPIO_InitStruct);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <GPIO_LedConfig+0x80>)
 80002b0:	f000 f9c7 	bl	8000642 <GPIO_Init>

	memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2218      	movs	r2, #24
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fb42 	bl	8000944 <memset>

	GPIO_InitStruct.pinNumber = GPIO_PIN_0;
 80002c0:	2301      	movs	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_PULLDOWN; //when button not pressed, port should read 0. otherwise it would read float num. see schematics.
 80002c8:	2302      	movs	r3, #2
 80002ca:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <GPIO_LedConfig+0x84>)
 80002d2:	f000 f9b6 	bl	8000642 <GPIO_Init>

	//EXTI_LineConfig(EXTI_PortSource_GPIOC,EXTI_Source_14);

}
 80002d6:	bf00      	nop
 80002d8:	3720      	adds	r7, #32
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40021800 	.word	0x40021800
 80002e8:	40020000 	.word	0x40020000

080002ec <GPIO_ButtonInterruptConfg>:

static void GPIO_ButtonInterruptConfg()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef_t EXTI_InitStruct = { 0 };
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]

	RCC_SYSCFG_CLK_ENABLE();
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 80002fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 8000300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000304:	6453      	str	r3, [r2, #68]	; 0x44
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 8000308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030e:	60fb      	str	r3, [r7, #12]
	RCC_GPIOA_CLK_ENABLE();
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <GPIO_ButtonInterruptConfg+0x6c>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	60bb      	str	r3, [r7, #8]
	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_Source_0);
 800032a:	2100      	movs	r1, #0
 800032c:	2000      	movs	r0, #0
 800032e:	f000 f923 	bl	8000578 <EXTI_LineConfig>

	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000332:	2301      	movs	r3, #1
 8000334:	71fb      	strb	r3, [r7, #7]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_Source_0;
 8000336:	2300      	movs	r3, #0
 8000338:	713b      	strb	r3, [r7, #4]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 800033a:	2300      	movs	r3, #0
 800033c:	71bb      	strb	r3, [r7, #6]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Rising;
 800033e:	2308      	movs	r3, #8
 8000340:	717b      	strb	r3, [r7, #5]


	EXTI_Init(&EXTI_InitStruct);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f88f 	bl	8000468 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 800034a:	2006      	movs	r0, #6
 800034c:	f000 f946 	bl	80005dc <NVIC_EnableInterrupt>

}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40023800 	.word	0x40023800

0800035c <SPI_Config>:


static void SPI_Config()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0
	SPI_HandleTypeDef_t SPI_Handle= { 0 };
 8000362:	463b      	mov	r3, r7
 8000364:	2224      	movs	r2, #36	; 0x24
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f000 faeb 	bl	8000944 <memset>

	RCC_SP1_CLK_ENABLE();
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <SPI_Config+0x6c>)
 8000374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <SPI_Config+0x6c>)
 8000378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037c:	6453      	str	r3, [r2, #68]	; 0x44
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <SPI_Config+0x6c>)
 8000380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000386:	627b      	str	r3, [r7, #36]	; 0x24

	SPI_Handle.Instance =  SPI1;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <SPI_Config+0x70>)
 800038a:	603b      	str	r3, [r7, #0]
	SPI_Handle.Init.BaudRate = SPI_BAUDRATE_DIV8;		//16/8 = 2MHz
 800038c:	2310      	movs	r3, #16
 800038e:	613b      	str	r3, [r7, #16]
	SPI_Handle.Init.BusConfig = SPI_BUS_FULLDUPLEX;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
	SPI_Handle.Init.CPHA = SPI_CPHA_FIRST;
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
	SPI_Handle.Init.CPOL = SPI_CPOL_LOW;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
	SPI_Handle.Init.DFF_Format = SPI_DFF_8BITS;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
	SPI_Handle.Init.FrameFormat = SPI_FRAMEFORMAT_MSB;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80003a4:	2304      	movs	r3, #4
 80003a6:	607b      	str	r3, [r7, #4]
	SPI_Handle.Init.SSM_Cmd = SPI_SSM_ENABLE;
 80003a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003ac:	617b      	str	r3, [r7, #20]

	SPI_Init(&SPI_Handle);
 80003ae:	463b      	mov	r3, r7
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f9fc 	bl	80007ae <SPI_Init>

	SPI_PeriphCmd(&SPI_Handle, ENABLE);
 80003b6:	463b      	mov	r3, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fa24 	bl	8000808 <SPI_PeriphCmd>

}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40013000 	.word	0x40013000

080003d0 <SPI_GPIO_Config>:

static void SPI_GPIO_Config()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 80003d6:	463b      	mov	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
 80003e4:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.pinNumber =  GPIO_PIN_5 | GPIO_PIN_7;  //PA5 -> CLK PA7 -> MOSI
 80003e6:	23a0      	movs	r3, #160	; 0xa0
 80003e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 80003ea:	2302      	movs	r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_OSPEED_VERY;
 80003ee:	2303      	movs	r3, #3
 80003f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Alternate = GPIO_AF5;
 80003fa:	2305      	movs	r3, #5
 80003fc:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	463b      	mov	r3, r7
 8000400:	4619      	mov	r1, r3
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <SPI_GPIO_Config+0x40>)
 8000404:	f000 f91d 	bl	8000642 <GPIO_Init>
}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40020000 	.word	0x40020000

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 fa5b 	bl	80008fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff ff01 	bl	800024c <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	08000984 	.word	0x08000984
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000040 	.word	0x20000040

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <EXTI_Init>:
  *
  * @retval Void
  */

void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]

	tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000474:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <EXTI_Init+0x10c>)
 8000476:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000478:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <EXTI_Init+0x10c>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	2301      	movs	r3, #1
 8000484:	408b      	lsls	r3, r1
 8000486:	43db      	mvns	r3, r3
 8000488:	493a      	ldr	r1, [pc, #232]	; (8000574 <EXTI_Init+0x10c>)
 800048a:	4013      	ands	r3, r2
 800048c:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800048e:	4b39      	ldr	r3, [pc, #228]	; (8000574 <EXTI_Init+0x10c>)
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	2301      	movs	r3, #1
 800049a:	408b      	lsls	r3, r1
 800049c:	43db      	mvns	r3, r3
 800049e:	4935      	ldr	r1, [pc, #212]	; (8000574 <EXTI_Init+0x10c>)
 80004a0:	4013      	ands	r3, r2
 80004a2:	604b      	str	r3, [r1, #4]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	78db      	ldrb	r3, [r3, #3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d04b      	beq.n	8000544 <EXTI_Init+0xdc>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	789b      	ldrb	r3, [r3, #2]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t *)tempValue = (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2201      	movs	r2, #1
 80004c2:	408a      	lsls	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <EXTI_Init+0x10c>)
 80004c8:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <EXTI_Init+0x10c>)
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	2301      	movs	r3, #1
 80004d6:	408b      	lsls	r3, r1
 80004d8:	43db      	mvns	r3, r3
 80004da:	4926      	ldr	r1, [pc, #152]	; (8000574 <EXTI_Init+0x10c>)
 80004dc:	4013      	ands	r3, r2
 80004de:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <EXTI_Init+0x10c>)
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4920      	ldr	r1, [pc, #128]	; (8000574 <EXTI_Init+0x10c>)
 80004f2:	4013      	ands	r3, r2
 80004f4:	60cb      	str	r3, [r1, #12]
		if (EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	785b      	ldrb	r3, [r3, #1]
 80004fa:	2b10      	cmp	r3, #16
 80004fc:	d114      	bne.n	8000528 <EXTI_Init+0xc0>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <EXTI_Init+0x10c>)
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	2301      	movs	r3, #1
 800050a:	408b      	lsls	r3, r1
 800050c:	4919      	ldr	r1, [pc, #100]	; (8000574 <EXTI_Init+0x10c>)
 800050e:	4313      	orrs	r3, r2
 8000510:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <EXTI_Init+0x10c>)
 8000514:	68da      	ldr	r2, [r3, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4619      	mov	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	408b      	lsls	r3, r1
 8000520:	4914      	ldr	r1, [pc, #80]	; (8000574 <EXTI_Init+0x10c>)
 8000522:	4313      	orrs	r3, r2
 8000524:	60cb      	str	r3, [r1, #12]
		tempValue = (uint32_t)EXTI_BASE_ADDR;
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*(__IO uint32_t *)tempValue &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);

	}
}
 8000526:	e020      	b.n	800056a <EXTI_Init+0x102>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	461a      	mov	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	4413      	add	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
			*(__IO uint32_t *)tempValue = (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	e012      	b.n	800056a <EXTI_Init+0x102>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <EXTI_Init+0x10c>)
 8000546:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
		*(__IO uint32_t *)tempValue &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	2301      	movs	r3, #1
 8000560:	4093      	lsls	r3, r2
 8000562:	43da      	mvns	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	400a      	ands	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40013c00 	.word	0x40013c00

08000578 <EXTI_LineConfig>:
  *
  * @retval Void
  */

void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;

	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2];			/*Divide by 4 to find which EXTICR*/
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <EXTI_LineConfig+0x60>)
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	3302      	adds	r3, #2
 8000592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000596:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);		/*Clear bits*/
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	f003 0303 	and.w	r3, r3, #3
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	220f      	movs	r2, #15
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U ) * 4);  /*Mode by 8 and find exact pin and write port source*/
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTI_CR[EXTI_LineSource >> 2] = tempValue;
 80005be:	4906      	ldr	r1, [pc, #24]	; (80005d8 <EXTI_LineConfig+0x60>)
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	089b      	lsrs	r3, r3, #2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3302      	adds	r3, #2
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40013800 	.word	0x40013800

080005dc <NVIC_EnableInterrupt>:
  *
  * @retval Void
  */

void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]

	tempValue = *( (IRQNumber >> 5U) + NVIC_ISER0 );		//Get NVIC register
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	095b      	lsrs	r3, r3, #5
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005f6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU)); 				//Mode(5) of IRQ and clear
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 031f 	and.w	r3, r3, #31
 8000604:	2201      	movs	r2, #1
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4013      	ands	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQNumber & 0x1FU));				//set to enable
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 031f 	and.w	r3, r3, #31
 8000618:	2201      	movs	r2, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4313      	orrs	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
	*( (IRQNumber >> 5U) + NVIC_ISER0 ) = tempValue;
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	b2db      	uxtb	r3, r3
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000630:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <GPIO_Init>:
  *
  * @retval Void
  */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 8000642:	b480      	push	{r7}
 8000644:	b087      	sub	sp, #28
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]

	uint32_t position;
	uint32_t fakePosition = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]

	for ( position = 0; position < 16; position++ )
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e09f      	b.n	800079a <GPIO_Init+0x158>
	{
		fakePosition = ( 0x1U << position );
 800065a:	2201      	movs	r2, #1
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)GPIO_ConfigStruct->pinNumber & fakePosition;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4013      	ands	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

		if(fakePosition == lastPosition)
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	429a      	cmp	r2, r3
 8000674:	f040 808e 	bne.w	8000794 <GPIO_Init+0x152>
		{
				/*	MODE CONFIG	*/
				uint32_t temp = GPIOx->MODER;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60bb      	str	r3, [r7, #8]
				temp &= ~( 0x3U << (position *2) );
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2203      	movs	r2, #3
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
				temp |= (GPIO_ConfigStruct->Mode << (position *2));
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4313      	orrs	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
				GPIOx->MODER = temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]

				if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF )
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d003      	beq.n	80006b8 <GPIO_Init+0x76>
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d12d      	bne.n	8000714 <GPIO_Init+0xd2>
				{
					/*	OUTPUT TYPE CONFIG	*/
					temp = GPIOx->OTYPER;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	60bb      	str	r3, [r7, #8]
					temp &= ~( 0x1U << position );
 80006be:	2201      	movs	r2, #1
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60bb      	str	r3, [r7, #8]
					temp |= (GPIO_ConfigStruct->Otype << position);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	4313      	orrs	r3, r2
 80006dc:	60bb      	str	r3, [r7, #8]
					GPIOx->OTYPER = temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	605a      	str	r2, [r3, #4]

					/*	OSPEED CONFIG	*/
					temp = GPIOx->OSPEEDR;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	60bb      	str	r3, [r7, #8]
					temp &= ~( 0x3U << (position *2) );
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	2203      	movs	r2, #3
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
					temp |= (GPIO_ConfigStruct->Speed << (position *2));
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4313      	orrs	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
					GPIOx->OSPEEDR = temp;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	609a      	str	r2, [r3, #8]

				}
				/*	PUSH PULL CONFIG	*/
				temp = GPIOx->PUPDR;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
				temp &= ~( 0x3U << (position *2) );
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2203      	movs	r2, #3
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
				temp |= (GPIO_ConfigStruct->PuPd << (position *2));
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	4313      	orrs	r3, r2
 800073c:	60bb      	str	r3, [r7, #8]
				GPIOx->PUPDR = temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	60da      	str	r2, [r3, #12]

				/*	ALTERNATE FUNCTION CONFIG	*/
				if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d123      	bne.n	8000794 <GPIO_Init+0x152>
				{
					temp = GPIOx->AFR[position >> 3U];
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	08da      	lsrs	r2, r3, #3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3208      	adds	r2, #8
 8000754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000758:	60bb      	str	r3, [r7, #8]
					temp &= ~( 0xFU << ((position & 0x7U) * 4 ) );
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	f003 0307 	and.w	r3, r3, #7
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	220f      	movs	r2, #15
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
					temp |= (GPIO_ConfigStruct->Alternate << ((position & 0x7U) * 4 ) );
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4313      	orrs	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
					GPIOx->AFR[position >> 3U] = temp;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	08da      	lsrs	r2, r3, #3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3208      	adds	r2, #8
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for ( position = 0; position < 16; position++ )
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	f67f af5c 	bls.w	800065a <GPIO_Init+0x18>
				}

		}
	}
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	371c      	adds	r7, #28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SPI_Init>:
  *
  * @retval Void
  */

void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]

	tempValue = SPI_Handle->Instance->CR1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]

	tempValue |= (SPI_Handle->Init.BaudRate) 	| \
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691a      	ldr	r2, [r3, #16]
			     (SPI_Handle->Init.CPHA)     	| \
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
	tempValue |= (SPI_Handle->Init.BaudRate) 	| \
 80007ca:	431a      	orrs	r2, r3
			     (SPI_Handle->Init.CPOL)     	| \
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
			     (SPI_Handle->Init.CPHA)     	| \
 80007d0:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.DFF_Format)  | \
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	699b      	ldr	r3, [r3, #24]
			     (SPI_Handle->Init.CPOL)     	| \
 80007d6:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) 		| \
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
				 (SPI_Handle->Init.DFF_Format)  | \
 80007dc:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.FrameFormat) | \
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a1b      	ldr	r3, [r3, #32]
				 (SPI_Handle->Init.Mode) 		| \
 80007e2:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.BusConfig)	| \
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
				 (SPI_Handle->Init.FrameFormat) | \
 80007e8:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.SSM_Cmd);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	695b      	ldr	r3, [r3, #20]
				 (SPI_Handle->Init.BusConfig)	| \
 80007ee:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.BaudRate) 	| \
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]

	SPI_Handle->Instance->CR1 = tempValue;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	601a      	str	r2, [r3, #0]


}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SPI_PeriphCmd>:
  * @param stateOfSPI = ENABLE or DISABLE
  * @retval Void
  */

void SPI_PeriphCmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t stateOfSPI)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	if(stateOfSPI == ENABLE)
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d108      	bne.n	800082c <SPI_PeriphCmd+0x24>
	{
		SPI_Handle->Instance->CR1 |= (0x1U << SPI_CR1_SPE);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000828:	601a      	str	r2, [r3, #0]
	else
	{
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
	}

}
 800082a:	e007      	b.n	800083c <SPI_PeriphCmd+0x34>
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <SPI_TransmitData>:
  *
  * @retval Void
  */

void SPI_TransmitData(SPI_HandleTypeDef_t *SPI_Handle, uint8_t *pData, uint16_t sizeOfData)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	4613      	mov	r3, r2
 8000852:	80fb      	strh	r3, [r7, #6]
	if(SPI_Handle->Init.DFF_Format == SPI_DFF_16BITS)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800085c:	d128      	bne.n	80008b0 <SPI_TransmitData+0x6a>
	{
		while(sizeOfData > 0)
 800085e:	e011      	b.n	8000884 <SPI_TransmitData+0x3e>
		{
			if( (SPI_GetFlagStatus(SPI_Handle, SPI_TXE_FLAG)))
 8000860:	2102      	movs	r1, #2
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f834 	bl	80008d0 <SPI_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00a      	beq.n	8000884 <SPI_TransmitData+0x3e>
			{
				SPI_Handle->Instance->DR = *((uint16_t*)pData);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	60da      	str	r2, [r3, #12]
				pData += sizeof(uint16_t);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3302      	adds	r3, #2
 800087c:	60bb      	str	r3, [r7, #8]
				sizeOfData -= 2;
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	3b02      	subs	r3, #2
 8000882:	80fb      	strh	r3, [r7, #6]
		while(sizeOfData > 0)
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ea      	bne.n	8000860 <SPI_TransmitData+0x1a>
 800088a:	e014      	b.n	80008b6 <SPI_TransmitData+0x70>
	}
	else
	{
		while(sizeOfData > 0)
		{
			if( (SPI_GetFlagStatus(SPI_Handle, SPI_TXE_FLAG)))
 800088c:	2102      	movs	r1, #2
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f81e 	bl	80008d0 <SPI_GetFlagStatus>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00a      	beq.n	80008b0 <SPI_TransmitData+0x6a>
			{
				SPI_Handle->Instance->DR = *pData;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60da      	str	r2, [r3, #12]
				pData++;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
				sizeOfData--;
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	80fb      	strh	r3, [r7, #6]
		while(sizeOfData > 0)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ea      	bne.n	800088c <SPI_TransmitData+0x46>
			}
		}
	}

	while(SPI_GetFlagStatus(SPI_Handle, SPI_Busy_FLAG)); //Wait for Busy Flag
 80008b6:	bf00      	nop
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f000 f808 	bl	80008d0 <SPI_GetFlagStatus>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f8      	bne.n	80008b8 <SPI_TransmitData+0x72>
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SPI_GetFlagStatus>:
  * @param SPI_Flag = Flag name of SR register
  *
  * @retval SPI_FlagStatus_t
  */
SPI_FlagStatus_t SPI_GetFlagStatus(SPI_HandleTypeDef_t *SPI_Handle, uint16_t SPI_Flag)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	807b      	strh	r3, [r7, #2]
	return (SPI_Handle->Instance->SR & SPI_Flag) ? SPI_FLAG_SET : SPI_FLAG_RESET;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf14      	ite	ne
 80008ea:	2301      	movne	r3, #1
 80008ec:	2300      	moveq	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <__libc_init_array>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	4d0d      	ldr	r5, [pc, #52]	; (8000934 <__libc_init_array+0x38>)
 8000900:	4c0d      	ldr	r4, [pc, #52]	; (8000938 <__libc_init_array+0x3c>)
 8000902:	1b64      	subs	r4, r4, r5
 8000904:	10a4      	asrs	r4, r4, #2
 8000906:	2600      	movs	r6, #0
 8000908:	42a6      	cmp	r6, r4
 800090a:	d109      	bne.n	8000920 <__libc_init_array+0x24>
 800090c:	4d0b      	ldr	r5, [pc, #44]	; (800093c <__libc_init_array+0x40>)
 800090e:	4c0c      	ldr	r4, [pc, #48]	; (8000940 <__libc_init_array+0x44>)
 8000910:	f000 f820 	bl	8000954 <_init>
 8000914:	1b64      	subs	r4, r4, r5
 8000916:	10a4      	asrs	r4, r4, #2
 8000918:	2600      	movs	r6, #0
 800091a:	42a6      	cmp	r6, r4
 800091c:	d105      	bne.n	800092a <__libc_init_array+0x2e>
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f855 3b04 	ldr.w	r3, [r5], #4
 8000924:	4798      	blx	r3
 8000926:	3601      	adds	r6, #1
 8000928:	e7ee      	b.n	8000908 <__libc_init_array+0xc>
 800092a:	f855 3b04 	ldr.w	r3, [r5], #4
 800092e:	4798      	blx	r3
 8000930:	3601      	adds	r6, #1
 8000932:	e7f2      	b.n	800091a <__libc_init_array+0x1e>
 8000934:	0800097c 	.word	0x0800097c
 8000938:	0800097c 	.word	0x0800097c
 800093c:	0800097c 	.word	0x0800097c
 8000940:	08000980 	.word	0x08000980

08000944 <memset>:
 8000944:	4402      	add	r2, r0
 8000946:	4603      	mov	r3, r0
 8000948:	4293      	cmp	r3, r2
 800094a:	d100      	bne.n	800094e <memset+0xa>
 800094c:	4770      	bx	lr
 800094e:	f803 1b01 	strb.w	r1, [r3], #1
 8000952:	e7f9      	b.n	8000948 <memset+0x4>

08000954 <_init>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	bf00      	nop
 8000958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095a:	bc08      	pop	{r3}
 800095c:	469e      	mov	lr, r3
 800095e:	4770      	bx	lr

08000960 <_fini>:
 8000960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000962:	bf00      	nop
 8000964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000966:	bc08      	pop	{r3}
 8000968:	469e      	mov	lr, r3
 800096a:	4770      	bx	lr
